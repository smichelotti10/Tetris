void top_scores(game_stats_t* jugador){
    
    typedef struct 
    {
        long int score;
        char name[3];
        int posicion_top;

    }jugador_top_t;
    
    //Leo el archivo, ordeno todos los datos y escribo uno "nuevo" con el mismo nombre
    int i,j,k;
    int c;
    int flag_repetido;

    long int top_scores[11] = {0,0,0,0,0,0,0,0,0,0,0} ;
    //char name_top_scores[11][3];

    jugador_top_t jugadores_top[11];
    for (i = 0; i < 11; i++)
    {
        jugadores_top[i].name[0] ='N';
        jugadores_top[i].name[1] ='A';
        jugadores_top[i].name[2] ='N';
        jugadores_top[i].score = 0;
        jugadores_top[i].posicion_top=i;
    }
    

    FILE* pfile1;
    int aux=10;
    
    pfile1 = fopen("top_scores.txt", "r");
    if (pfile1 == NULL) //Verificamos si no existía el archivo, en ese caso este puntaje sería el maximo pq es el primero
    {
        jugadores_top[0].score = jugador->score;
        for (i = 0; i < 3; i++)
        {      
            jugadores_top[0].name[i] = jugador->nick[i];
        }
        pfile1 = fopen("top_scores.txt", "w");
        if (pfile1 !=NULL) //vemos si este si lo pudo crear
        {
            //printf("%ld\n", top_scores[0]);
            printf("%3.3s\n", jugadores_top[0].name);
            fprintf(pfile1,"%ld %3.3s\n",jugadores_top[0].score,jugadores_top[0].name); //3.3 es para indicar minimo 3 caracteres, maximo 3
            fclose(pfile1);
        }
        
    }
    else{ //esto es el caso en el que si existe, hay que leerlo, pasar la info a los array y luego ordenarlo con el nuevo jugador

        while(!feof(pfile1)) //Hasta que no llegue al EOF seguimos leyendo
        {
            for ( i = 0; i < 10; i++)
            {
                c = fgetc(pfile1);
                if ( c == EOF )
                {
                    aux = i;
                    break;
                }
                else{
                    fseek(pfile1, -1,SEEK_CUR);
                    fscanf (pfile1, "%ld", &(jugadores_top[i].score)); //Leo los datos y los acomodo en los array
                    fscanf (pfile1, "%s", jugadores_top[i].name);
                    jugadores_top[i].posicion_top=i;
                    printf("%ld %3.3s %d\n",jugadores_top[i].score,jugadores_top[i].name,i );
                }
                
            }
            
        }
        fclose(pfile1);

        jugadores_top[10].score = jugador->score; //meto los datos del jugador actual en el array para ordenarlo
        for (i = 0; i < 3; i++)
        {      
            jugadores_top[10].name[i] = jugador->nick[i];
        }
        jugadores_top[10].posicion_top=10;

        for(i =0; i<aux; i++){ //meto los datos en un arreglo para ordenarlos
        
        top_scores[i] =  jugadores_top[i].score;
        
        }
        top_scores[10] =  jugadores_top[10].score;

        for(i =0; i<11; i++){ //meto los datos en un arreglo para ordenarlos
            printf("%ld ", top_scores[i]);
        }
        printf("\n");

        qsort (top_scores, 11, sizeof(long int), compare); //aca ordena de mayor a menor los elementos de top_scores
        
        for(i =0; i<11; i++){ //meto los datos en un arreglo para ordenarlos
            printf("%ld ", top_scores[i]);
        }
        printf("\n");


        printf("Asignando:\n");
        for (i = 0; i < aux+1; i++) //ahora recorro la matriz en busqueda de los mismos puntajes para ordenar todos los jugadores
        {
            flag_repetido = 0;
            
            for ( k = i+1; k < 11; k++)
            {
                if (top_scores[i]==top_scores[k] && top_scores[k]!=0)
                {
                    flag_repetido++; //cuento las veces que se repute el numero que debo guardar a continuacion
                }
            }
            
            
            for (j = 0; j < 11; j++) //con esta recorro los jugadores
            {
                if (top_scores[i] == jugadores_top[j].score && flag_repetido==0)
                {
                    jugadores_top[j].posicion_top = i;  //le asigno el lugar que le corresponde al jugador
                    
                    printf("%ld %3.3s %d\n",jugadores_top[j].score,jugadores_top[j].name,i );
                    break;
                }
                else if (top_scores[i] == jugadores_top[j].score && flag_repetido!=0)
                {
                    printf("Entre al caso de flag repetido, el flag es: %d\n", flag_repetido);

                    jugadores_top[j+flag_repetido].posicion_top = i;  //le asigno el lugar que le corresponde al jugador
                    
                    printf("%ld %3.3s %d\n",jugadores_top[j].score,jugadores_top[j+flag_repetido].name,i );
                    flag_repetido--;
                    break;
                }
                
                
            }
            
        }

        pfile1 = fopen("top_scores.txt", "w");

        for ( i = 0; i < aux+1; i++) //me voy a mover entre los primeros jugadores según el id de posicion que les corresponde
        {
            for (j = 0; j < 11; j++) //con esta recorro los jugadores
            {
                if (i == jugadores_top[j].posicion_top) //voy en orden imprimiendo
                {
                    fprintf(pfile1,"%ld %3.3s\n",jugadores_top[j].score,jugadores_top[j].name); //3.3 es para indicar minimo 3 caracteres, maximo 3
                    break;
                }
                
            }
        }
        fclose(pfile1);        

    }
    

}


int compare (const void * a, const void * b)
{
  return ( *(long int*)b - *(long int*)a );
}
